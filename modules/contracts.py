# modules/contracts.py
from __future__ import annotations
from typing import Protocol, runtime_checkable, Any
import pandas as pd
from matplotlib.figure import Figure
from os import PathLike


class DataLoadError(Exception):
    """Raised when the dataset cannot be loaded or validated."""


@runtime_checkable
class IDataLoader(Protocol):
    def load_data(self) -> pd.DataFrame: ...
    def validate_schema(self, df: pd.DataFrame) -> None: ...


@runtime_checkable
class IAnalyzer(Protocol):
    def clean(self, df: pd.DataFrame) -> pd.DataFrame: ...
    def features(self, df: pd.DataFrame) -> pd.DataFrame: ...
    def average_price_by_region(self, df: pd.DataFrame) -> pd.Series: ...
    def rolling_mean(self, df: pd.DataFrame, window: int = 12) -> pd.DataFrame: ...
    # ⬇️ ADD THIS
    def melt_property_prices(self, df: pd.DataFrame) -> pd.DataFrame: ...


@runtime_checkable
class IPredictor(Protocol):
    def train(self, X, y) -> None: ...
    def validate(self, X_val, y_val) -> dict[str, float]: ...
    def forecast(self, X_future) -> Any: ...


@runtime_checkable
class IVisualizer(Protocol):
    def trend_line(self, df: pd.DataFrame, title: str) -> Figure: ...
    def bar_growth(self, df: pd.DataFrame, title: str) -> Figure: ...


@runtime_checkable
class IReportGenerator(Protocol):
    def compile(self, summary: dict, figures: list[Figure], metrics: dict, forecasts: pd.DataFrame) -> None: ...
    def export(self, path: str | PathLike = "report.html") -> str: ...
    def export_csv(self, forecasts: pd.DataFrame, path: str | PathLike = "forecasts.csv") -> str: ...
